module Event2SocialNetwork;
create OUT : SE from IN : E,SN;

-- @path E=/ASE Project/Metamodel/Event2.ecore
-- @path SN=/ASE Project/Metamodel/SocialNetwork.ecore
-- @path SE=/ASE Project/Metamodel/Social Event.ecore

helper context E!Event def: getNames() : Set(String) =
	set -> select(self.title);


helper context SN def: associatedEvent() : TupleType(sn : SN , e : Event) =
	if (self.Status.hashtag -> size() <> 0) then
		for (h in self.Status.hashtag -> allInstances()){
			for (e in E!Event){
				if(h.text = '#'.concat(e.title) or h.text.contains(e.title) or e.title.contains(h.text)){
					return Tuple{sn: self , e : e}
				}
		}
	}
;

rule EventStatus2Post {
	from:
		sn : associatedEvent().sn
		e : associatedEvent().e
	to:
		sePost : SE!Post (
				text <- sn.Status.text,
				date&hour <- sn.Status.date&hour,
				socialNetwork <- sn.SocialNetowrk.name,
				location <- e.Event.place,
				like <- sn.Status.like,
				numberOfShare <- sn.Status.numberOfShare
			)
}

rule Event2Event {
	from:
		e : associatedEvent().e
	to:Â 
		sePost : SE!Event (
				id <- e.Event.id,
				name <- e.Event.title,
				type <- e.Event.type
				numberOfPartecipants <- e.Event.numberOfPartecipants
			)
}

rule User2People {
	from:
		
}

