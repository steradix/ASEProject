-- @path Event =/ASE Project/Metamodel/Event.ecore
-- @path SocialNetwork =/ASE Project/Metamodel/SocialNetwork.ecore
-- @path SocialEvent =/ASE Project/Metamodel/SocialEvent.ecore

module EventAndSocialNetwork2SocialEvent;

create OUT : SocialEvent from IN : Event, IN2 : SocialNetwork;

--- Determine whether the Social Network's post has hashtag.

helper context SocialNetwork!Status def: hasHashtag() : Boolean =
	
	if self.hashtag.oclIsUndefined() then
		false
	else
		true
	endif
;

--- Determine whether the SocialNetowrk's posts has media.

helper context SocialNetowrk!Status def: hasMedia() : Boolean =
	
	if self.media.oclIsUndefined() then
		false
	else
		true
	endif
;

--- Determine the set of posts related to a certain event, with respect to certain conditions:
--- (1) The Post's text contains the Event's name
--- (2) The Post's coordinates are equal to the Event's coordinates and the Post's date is between startDate and endDate of Event
--- (3) The Post contains Event's hashtag

helper context SocialNetwork!Status def: getRelatedStatus(e : Event!Event) : Set(SocialNetwork!Status) =
	
	self -> select (s |
		s.text.contains(e.title) or -- (1)
		s.location = e.location and s.dateAndHour >= e.startDate and s.dateAndHour <= e.endDate or -- (2)
		s.hasHashtag() and s.hashtag -> select ( h | (e.hashtag -> select (hE | hE.text = h.text))) -> size() <> 0 -- (3)
		)
;

rule Event2Event {
	from
		e : Event!Event
		sn : SocialNetwork!Status
	to 
		se : SocialEvent!Event (
			identifier <- e.identifier,
			name <- e.name,
			type <- e.type,
			posts <- sn.getRelatedStatus(e),
			location <- e.location
		)
}

rule Status2Post {
	
	from 
		s : SocialNetwork!Status
	
	to
		p : SocialEvent!Post (
			text <- s.text,
			dateAndHour <- s.dateAndHour,
			socialNetwork <- s.refImmediateComposite().name,
			like <- s.like,
			numberOfShare <- s.numberOfShare,
			author <- s.author,
			tags <- s.tag,
			share <- s.share,
			media <- s.media,
			hashatag <- s.hashtag
			)	
}

rule User2Person {
	
	from
		u : SocialNetwork!User
	
	to
		p : SocialEvent!Person (
			
			name <- u.firstName,
			lastName <- u.lastName,
			gender <- u.gender,
			age <- u.age,
			nationality <- u.nationality
			
			)
	
}





-- @path E=/ASE Project/Metamodel/Event2.ecore
-- @path SN=/ASE Project/Metamodel/SocialNetwork.ecore
-- @path SE=/ASE Project/Metamodel/SocialEvent.ecore
--
--module 
--
--helper context E!Event def: getNames() : Set(String) =
--	set -> select(self.title);
--
--
--helper context SN def: associatedEvent() : TupleType(sn : SN , e : Event) =
--	if (self.Status.hashtag -> size() <> 0) then
--		for (h in self.Status.hashtag -> allInstances()){
--			for (e in E!Event){
--				if(h.text = '#'.concat(e.title) or h.text.contains(e.title) or e.title.contains(h.text)){
--					return Tuple{sn: self , e : e}
--				}
--		}
--	}
--;
--
--helper context E def getEvent(Post): Event =
--	
--	self.events->select(...).first()
--	
--	self.Event -> select(e | Post.text.contain(e.title) or Post.hashtag.).first()
--
--
--
--rule Event2Event {
--	from:
--		e : associatedEvent().e
--	to:Â 
--		sePost : SE!Event (
--				id <- e.Event.id,
--				name <- e.Event.title,
--				type <- e.Event.type
--				numberOfPartecipants <- e.Event.numberOfPartecipants
--			)
--}
--
--
--rule Status2Post{
--	from:
--		s : SN!Status
--	to:
--		p: SE!Post (
--			p.text <- s.text,
--			p.socialNetwork <- s.refImmediateComposite().name,
--			p.location <- s.location.name,
--			p.like <- s.like,
--			p.numberOfShare <- s.numberOfShare,
--			dateAndHour <- s.dateAndHour,
--			p.hashtag <- s.hashtag,
--			p.relatedTo <- getEvent(p)
--		)
--}
--
--rule User2People{
--	from:
--		s : SN!User
--	to:
--		p : SE!People (
--				p.name <- s.firstName,
--				p.lastName <- s.lastName,
--				p.gender <- s.gender,
--				p.age <- s.age,
--				p.nationality <- s.nationality
--			)
--}
--
--rule Event2Event{
--	from:
--		e : E!Event
--	to:
--		se : SE!Event (
--				se.identifier <- e.identifier,
--				se.name <- e.title,
--				se.type <- e.type,
--				se.numberOfPartecipants <- e.numberOfPartecipants
--			)
--}



